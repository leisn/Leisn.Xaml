<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Leisn.Xaml.Wpf.Controls">
  <Style x:Key="ExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" Height="{DynamicResource ExpenderArrowWidth}" Stretch="Uniform"
                    HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin=".5,.5"
                    Stroke="{Binding RelativeSource={RelativeSource AncestorType=Expander},Path=Foreground}"
                    SnapsToDevicePixels="false" StrokeThickness="1">
                <Path.RenderTransform>
                  <RotateTransform Angle="-90"/>
                </Path.RenderTransform>
              </Path>
              <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="3,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="RenderTransform" TargetName="arrow">
                <Setter.Value>
                  <RotateTransform Angle="0"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextAccentBrush }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextDarkerBrush }"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value=".56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="arrow" Height="{DynamicResource ExpenderArrowWidth}" Stretch="Uniform"
                      Data="M 1,1.5 L 4.5,5 L 8,1.5" RenderTransformOrigin=".5,.5"
                      HorizontalAlignment="Center" VerticalAlignment="Center"
                      Stroke="{Binding RelativeSource={RelativeSource AncestorType=Expander},Path=Foreground}"
                      SnapsToDevicePixels="false" StrokeThickness="1">
                <Path.RenderTransform>
                  <RotateTransform Angle="-90"/>
                </Path.RenderTransform>
              </Path>
              <ContentPresenter Grid.Column="1" HorizontalAlignment="Left" Margin="3,0,0,0" RecognizesAccessKey="True" SnapsToDevicePixels="True" VerticalAlignment="Center"/>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="RenderTransform" TargetName="arrow">
                <Setter.Value>
                  <RotateTransform Angle="180"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextAccentBrush }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextDarkerBrush }"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value=".56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.LayoutTransform>
                <TransformGroup>
                  <TransformGroup.Children>
                    <TransformCollection>
                      <RotateTransform Angle="90"/>
                    </TransformCollection>
                  </TransformGroup.Children>
                </TransformGroup>
              </Grid.LayoutTransform>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Grid HorizontalAlignment="Left">
                <Grid.LayoutTransform>
                  <TransformGroup>
                    <TransformGroup.Children>
                      <TransformCollection>
                        <RotateTransform Angle="180"/>
                      </TransformCollection>
                    </TransformGroup.Children>
                  </TransformGroup>
                </Grid.LayoutTransform>
                <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" Height="{DynamicResource ExpenderArrowWidth}" Stretch="Uniform"
                      HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin=".5,.5"
                      Stroke="{Binding RelativeSource={RelativeSource AncestorType=Expander},Path=Foreground}"
                      SnapsToDevicePixels="false" StrokeThickness="1">
                  <Path.RenderTransform>
                    <RotateTransform Angle="90"/>
                  </Path.RenderTransform>
                </Path>
              </Grid>
              <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,0,0" RecognizesAccessKey="True" Grid.Row="1" Grid.Column="1" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="RenderTransform" TargetName="arrow">
                <Setter.Value>
                  <RotateTransform Angle="0"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextAccentBrush }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextDarkerBrush }"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value=".56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Padding="{TemplateBinding Padding}">
            <Grid Background="Transparent" SnapsToDevicePixels="False">
              <Grid.LayoutTransform>
                <TransformGroup>
                  <TransformGroup.Children>
                    <TransformCollection>
                      <RotateTransform Angle="90"/>
                    </TransformCollection>
                  </TransformGroup.Children>
                </TransformGroup>
              </Grid.LayoutTransform>
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="20"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>
              <Path x:Name="arrow" Data="M 1,1.5 L 4.5,5 L 8,1.5" Height="{DynamicResource ExpenderArrowWidth}" Stretch="Uniform"
                      HorizontalAlignment="Left" VerticalAlignment="Center" RenderTransformOrigin=".5,.5"
                      Stroke="{Binding RelativeSource={RelativeSource AncestorType=Expander},Path=Foreground}"
                      SnapsToDevicePixels="false" StrokeThickness="1">
                <Path.RenderTransform>
                  <RotateTransform Angle="-90"/>
                </Path.RenderTransform>
              </Path>
              <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,0,0" RecognizesAccessKey="True" Grid.Column="1" SnapsToDevicePixels="True" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="true">
              <Setter Property="RenderTransform" TargetName="arrow">
                <Setter.Value>
                  <RotateTransform Angle="0"/>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextAccentBrush }"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
              <Setter Property="Stroke" TargetName="arrow" Value="{DynamicResource TextDarkerBrush }"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Opacity" Value=".56"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="ExpanderBaseStyle" TargetType="{x:Type Expander}">
    <Setter Property="Foreground" Value="{DynamicResource TextBrush}"/>
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="local:LayoutAttach.Padding" Value="0"/>
    <Setter Property="local:BorderAttach.CornerRadius" Value="{DynamicResource DefaultCornerRadius}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Expander}">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                  CornerRadius="{TemplateBinding local:BorderAttach.CornerRadius}" SnapsToDevicePixels="true">
            <DockPanel>
              <ToggleButton x:Name="HeaderSite" ContentTemplate="{TemplateBinding HeaderTemplate}"
                            Content="{TemplateBinding Header}"
                            ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                            DockPanel.Dock="Top" FontStretch="{TemplateBinding FontStretch}"
                            Foreground="{TemplateBinding Foreground}"
                            FontStyle="{TemplateBinding FontStyle}" FontFamily="{TemplateBinding FontFamily}"
                            FontWeight="{TemplateBinding FontWeight}" FontSize="{TemplateBinding FontSize}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                            Margin="1" MinWidth="0" MinHeight="0" Padding="{TemplateBinding local:LayoutAttach.Padding}"
                            Style="{StaticResource ExpanderDownHeaderStyle}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <ContentPresenter x:Name="ExpandSite" DockPanel.Dock="Bottom" Focusable="false" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Visibility="Collapsed"/>
            </DockPanel>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="true">
              <Setter Property="Visibility" TargetName="ExpandSite" Value="Visible"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Right">
              <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Right"/>
              <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Left"/>
              <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderRightHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
              <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Top"/>
              <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Bottom"/>
              <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderUpHeaderStyle}"/>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left">
              <Setter Property="DockPanel.Dock" TargetName="ExpandSite" Value="Left"/>
              <Setter Property="DockPanel.Dock" TargetName="HeaderSite" Value="Right"/>
              <Setter Property="Style" TargetName="HeaderSite" Value="{StaticResource ExpanderLeftHeaderStyle}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="Expander" BasedOn="{StaticResource ExpanderBaseStyle}"/>
</ResourceDictionary>